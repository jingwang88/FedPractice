2016.1.19

1.	offsetWidth和offsetHeigth包括边框和内边框和内容（clientWidth和clientHeigth不包含边框）
	offsetTop offsetLeft 指的是边框到父元素的外边框的距离

2. 可以通过正则表达式来检测class中是否含有所要寻找的类
	可以用replace（reg，__）移除想要移除的类

3. DOM节点：firstChild lastChild childNodes[ ] document.documentElement 
			nextSibling previousSlbling 

4. 	window.innerHeight window.innerWidth window.outterHeight window.outterWidth
	document.documentElement.clientHeight 	document.body.clientHeight

	screenLeft screenTop (IE safri opera chrome)
	screenX screenY(safri chrome )(opera 不与screenLeft screenTop对应)
	
	for(var i=0; i<navigator.plugins.length; i++) {
		console.log(navigator.plugins[i].name + ":" + navigator.plugins[i].description +  ":" + navigator.plugins[i].filename);
	}


2016.1.24 
1.节点对象的tagName属性为大写 document.getElementById("").tagName

2015.11.26
AJAX 
xmlhttp = new XMLHttpRequest() or new ActiveObject("Microsoft.XMLHTTP")
xmlhttp.open(method, url, true)
xmlhttp.send(string)
xmlhttp.responseXML or xmlhttp.responseText
xmlhttp.onReadyStatechange
xmlhttp.readyState 0：请求初始化 1：服务器已建立 2：请求已接收 3：请求处理中 4：请求已完成，且响应已就绪
xmlhttp.status 200 :"ok"    404 : "未找到页面"


2016.2.2
1.typeof 与 instanceof ：
	typeof 检测引用类型不行，是检测基本类型的得力助手，null或对象会返回object；
	chrome7-、safari5- typeof正则表达式返回function；
	ie、firefox返回object；
	instanceof 检测引用类型。

2016.2.3
环境：执行环境。
1.javascript没有块级作用域在if（）{} for（）{}中定义的变量会出现在全局作用域；
2.在函数中使用var定义变量会使该变量在当前函数环境变量对象中，没有使用var定义则在全局环境变量对象中；
3.垃圾收集：
	a.标记清除mark and sweep
	b.引用计数
	c.垃圾收集是周期性工作，不同浏览器有不同的触发方法
	d.管理内存，一旦数据不再用最好置为null，解除引用dereferening，这种做法适用于全局变量和全局对象，局部变量会在离开它执行环境时自动被解除。
4.Array引用类型方法：slice（ar1，ar2）截取ar1起始位置 ar2结束位置 splice（ar1,ar2，。。。。。）ar1起始位置，
ar2删除数量，后面参数：要代替进入的，indexOf（），迭代方法：every() some() filter() map() forEach() 

2016.2.6
1.javascript对iframe的DOM操作
	function getIframeDom() {
		return document.getElementByID(ID).contentDocument || document.frames[id].document;
	}

2016.2.8
1.nodeType nodeValue nodeName 
2.createElement createTextNode cloneNode(bool是否克隆子节点) appendChild createDocumentFragment
	createDocumentFragment 
	createDocumentFragment方法用来创建一个DocumentFragment。在前面我们说到DocumentFragment表示一种轻量级的文档，它的作用主要是存储临时的节点用来准备添加到文档中。
	createDocumentFragment方法主要是用于添加大量节点到文档中时会使用到。假设要循环一组数据，然后创建多个节点添加到文档中，比如示例
	<ul id="list"></ul>
	<input type="button" value="添加多项" id="btnAdd" />

	document.getElementById("btnAdd").onclick = function(){
		var list = document.getElementById("list");
		for(var i = 0;i < 100; i++){
			var li = document.createElement("li");
			li.textContent = i;
			list.appendChild(li);
		}
	}
	这段代码将按钮绑定了一个事件，这个事件创建了100个li节点，然后依次将其添加HTML文档中。这样做有一个缺点：每次一创建一个新的元素，然后添加到文档树中，这个过程会造成浏览器的回流。所谓回流简单说就是指元素大小和位置会被重新计算，如果添加的元素太多，会造成性能问题。这个时候，就是使用createDocumentFragment了。

	DocumentFragment不是文档树的一部分，它是保存在内存中的，所以不会造成回流问题。我们修改上面的代码如下：
	document.getElementById("btnAdd").onclick = function(){
		var list = document.getElementById("list"); 
		var fragment = document.createDocumentFragment();

		for(var i = 0;i < 100; i++){
		  var li = document.createElement("li");
			li.textContent = i;
			fragment.appendChild(li);
		}

		list.appendChild(fragment);
	}
	优化后的代码主要是创建了一个fragment，每次生成的li节点先添加到fragment，最后一次性添加到list，大家可以看示例
    //获取函数名
    function getFunctionName(fn) {
        if(fn.name) {
            return fn.name;
        }else {
            var str = fn.toString();
            str = str.subStr('function '.length);
            str = str.subStr(0,str.indexOf('('));
            return str;
        }
    }


2016.2.21
css隐藏元素的几种方法，最常见的是下面几种：
1.display:none,通过这种方法元素会从页面中消失并且原占有的空间会被其它元素占有，这就会导致repaint和reflow。
（reflow and repaint http://www.stubbornella.org/content/2009/03/27/reflows-repaints-css-performance-making-your-javascript-slow/）
2.visibility:none,元素会从页面中消失但占有的空间还是存在；
3.opacity:0,元素并没有消失只是完全透明了看不见而已；
4.将元素的盒子高度、边框、填充全部设置为0并且overflow：hidden。
不常见：
1.将z-index设置成负数
2.将元素设置到界面外。等等